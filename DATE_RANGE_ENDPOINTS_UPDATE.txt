RADIUS API - Date Range Query Update
====================================

🚀 Deployment Status: ✅ SUCCESSFULLY UPDATED
Generated: 2025-09-01 09:27:15

🔑 API Key: 4dffc5ac26dee193fbe478a5b2666bac41102412d00b73ffcf2a72b0645a207c

📊 NEW DATE RANGE ENDPOINTS:
============================

## 1. Accounting with Date Range:
GET /acct/{username}/{limit}/{offset}/{start_date}/{end_date}

### Features:
- Queries radacct table with date filtering
- Filters by acctstarttime field
- Returns accounting records within specified date range
- Ordered by acctstarttime DESC (newest first)

### Example:
GET /acct/rgl100040/20/0/2025-09-01/2025-09-30
- Gets 20 accounting records for user 'rgl100040'
- From September 1-30, 2025
- Skip 0 records (first page)

## 2. Authentication Logs with Date Range:
GET /authlog/{username}/{limit}/{offset}/{start_date}/{end_date}

### Features:
- Queries radpostauth table with date filtering
- Filters by authdate field
- Returns authentication attempts within specified date range
- Ordered by authdate DESC (newest first)

### Example:
GET /authlog/rgl100040/50/0/2025-08-01/2025-08-31
- Gets 50 auth log records for user 'rgl100040'
- From August 1-31, 2025
- Skip 0 records (first page)

🗓️ DATE FORMAT & VALIDATION:
=============================

### Date Format: YYYY-MM-DD
Examples:
- 2025-09-01 (September 1, 2025)
- 2025-12-31 (December 31, 2025)

### Validation Rules:
✅ start_date must be <= end_date
✅ Maximum date range: 1 year (365 days)
✅ Standard ISO date format required
✅ Invalid dates return 400 error with helpful message

### Error Examples:
- Invalid format: "2025/09/01" → 400 Bad Request
- Invalid range: start > end → 400 Bad Request  
- Too large range: > 1 year → 400 Bad Request

📨 RESPONSE FORMAT:
===================

Both endpoints return PaginatedResponse:
```json
{
  "count": 25,
  "data": [
    {
      // Accounting: radacctid, username, acctstarttime, etc.
      // Auth Logs: id, username, authdate, reply, etc.
    }
  ]
}
```

🔍 SQL QUERIES EXECUTED:
=========================

### Accounting Count Query:
```sql
SELECT COUNT(*) as count 
FROM radacct 
WHERE username = ? 
  AND DATE(acctstarttime) >= ? 
  AND DATE(acctstarttime) <= ?
```

### Accounting Data Query:
```sql
SELECT radacctid, username, acctterminatecause, callingstationid, 
       nasipaddress, acctstarttime, acctupdatetime, acctstoptime,
       acctsessiontime, acctinputoctets, acctoutputoctets, framedipaddress
FROM radacct 
WHERE username = ? 
  AND DATE(acctstarttime) >= ? 
  AND DATE(acctstarttime) <= ?
ORDER BY acctstarttime DESC
LIMIT ? OFFSET ?
```

### Auth Log Count Query:
```sql
SELECT COUNT(*) as count 
FROM radpostauth 
WHERE username = ? 
  AND DATE(authdate) >= ? 
  AND DATE(authdate) <= ?
```

### Auth Log Data Query:
```sql
SELECT id, username, pass, reply, authdate, class
FROM radpostauth 
WHERE username = ? 
  AND DATE(authdate) >= ? 
  AND DATE(authdate) <= ?
ORDER BY authdate DESC
LIMIT ? OFFSET ?
```

🔧 TECHNICAL IMPROVEMENTS:
==========================

✅ Date validation utility function added
✅ Enhanced error handling for date formats
✅ Efficient DATE() function usage for filtering
✅ User existence validation before querying
✅ Consistent pagination support
✅ Performance-optimized queries with date indexing

📝 USAGE EXAMPLES:
==================

```bash
# Get accounting records for last week
curl -X GET "http://localhost:8000/acct/rgl100040/100/0/2025-08-25/2025-09-01" \
  -H "Authorization: Bearer 4dffc5ac26dee193fbe478a5b2666bac41102412d00b73ffcf2a72b0645a207c"

# Get authentication logs for current month
curl -X GET "http://localhost:8000/authlog/rgl100040/200/0/2025-09-01/2025-09-30" \
  -H "Authorization: Bearer 4dffc5ac26dee193fbe478a5b2666bac41102412d00b73ffcf2a72b0645a207c"

# Get second page of results (offset 50)
curl -X GET "http://localhost:8000/acct/rgl100040/50/50/2025-09-01/2025-09-15" \
  -H "Authorization: Bearer 4dffc5ac26dee193fbe478a5b2666bac41102412d00b73ffcf2a72b0645a207c"
```

🎯 BENEFITS:
============

✅ Precise date-range filtering for better performance
✅ Reduced data transfer with targeted queries
✅ Enhanced reporting capabilities for specific time periods
✅ Audit-friendly historical data retrieval
✅ User-friendly date format (YYYY-MM-DD)
✅ Proper validation prevents database overload

📚 Access Points:
=================
- API Documentation: http://localhost:8000/docs
- Health Check: http://localhost:8000/health
- Base API: http://localhost:8000

🏁 READY FOR USE!
=================

Both accounting and authentication log endpoints now support precise date range queries with comprehensive validation and optimized performance.

Deployment Time: 2025-09-01 09:27:15 ✅